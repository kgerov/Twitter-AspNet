@using System.Web.UI.WebControls
@model Twitter.Web.Models.UserViewModel

@{
    var base64 = Convert.ToBase64String(Model.Image);
    var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
}


<div class="row">
    <div class="col-md-6">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Settings</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.HomeTown, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.HomeTown, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.HomeTown, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.WebSite, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.WebSite, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.WebSite, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-md-6">
        <div class="form-horizontal form-image-upload">
            <h4>Profile Picture</h4>
            <hr />
            <div id="imagePreview" style="background-image: url(@imgSrc)"></div>
            <hr />
            <div class="form-group">
                <div class="col-md-8">
                    <input type="file" id="uploadEditorImage">
                </div>
                <div class="col-md-4">
                    <button id="uploadImgBtn" class="btn btn-success">Upload</button>
                    <button id="deleteImgBtn" class="btn btn-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>


<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section UploadImageScript {
    <script type="text/javascript">
        $("#uploadImgBtn").click(function () {
            var data = new FormData();
            var files = $("#uploadEditorImage").get(0).files;
            if (files.length > 0) {
                data.append("HelpSectionImages", files[0]);
            }

            $.ajax({
                url: "/Users/UploadPic/",
                type: "POST",
                processData: false,
                contentType: false,
                data: data,
                success: function (response) {
                   
                },
                error: function (er) {
                }
            });
        });


        $("#deleteImgBtn").click(function () {
            $.ajax({
                url: "/Users/DeletePic/",
                type: "DELETE",
                processData: false,
                contentType: false,
                success: function (response) {
                },
                error: function (er) {
                }
            });
        });

        $("#uploadEditorImage").change(function() {
            var files = !!this.files ? this.files : [];
            if (!files.length || !window.FileReader) return; // no file selected, or no FileReader support

            if (/^image/.test(files[0].type)) { // only image file
                var reader = new FileReader(); // instance of the FileReader
                reader.readAsDataURL(files[0]); // read the local file

                reader.onloadend = function() { // set image data as background of div
                    $("#imagePreview").css("background-image", "url(" + this.result + ")");
                }
            }
        });
    </script>
}